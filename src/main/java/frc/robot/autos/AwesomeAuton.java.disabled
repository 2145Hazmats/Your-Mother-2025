// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.autos;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.Commands;
import frc.robot.ReefConstants.PoseConstants;
import frc.robot.RobotContainer;
import frc.robot.commands.ScoreCoral;
import frc.robot.subsystems.CommandSwerveDrivetrain;
import frc.robot.subsystems.ElevatorSubsystem;
import frc.robot.subsystems.ShooterBoxx;

/* You should consider using the more terse Command factories API instead https://docs.wpilib.org/en/stable/docs/software/commandbased/organizing-command-based.html#defining-commands */
public class AwesomeAuton extends Command {
  /** Creates a new AwesomeAuton. */
  // Declare other subsystems 
  private CommandSwerveDrivetrain theLegs;
  private ElevatorSubsystem theElephant;
  private ShooterBoxx theSnout;
  private int preloadScoreIndex = 7; //H

  public AwesomeAuton(CommandSwerveDrivetrain legs, ElevatorSubsystem neck, ShooterBoxx snout) { //CENTER AUTO
    // Use addRequirements() here to declare subsystem dependencies.
    theLegs = legs;
    theElephant = neck;
    theSnout = snout;
    
    addRequirements(theLegs);
    addRequirements(theElephant);
    addRequirements(theSnout);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    if (theLegs.isAllianceBlue()) { // Blue Alliance
      theLegs.resetPose(new Pose2d(7.122, 4.028, new Rotation2d(Units.degreesToRadians(180)))); 
    } else if (theLegs.isAllianceRed()) { // Red Alliance
      theLegs.resetPose(new Pose2d(10.457, 4.006, new Rotation2d(0)));
    }
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    if (theLegs.isAllianceBlue()) { // Blue Alliance
      theLegs.pathFindToReefBlueGH().andThen( // Specific side of the reef H is right G is left  // 0 is a //1 is b
      Commands.parallel(
        theLegs.applyRequest(() -> // Individual pose
            RobotContainer.drive.withVelocityX(theLegs.PIDDriveToPointX(PoseConstants.BLUE_REEF_POSES[preloadScoreIndex].getX()) * RobotContainer.MaxSpeed)
              .withVelocityY(theLegs.PIDDriveToPointY(PoseConstants.BLUE_REEF_POSES[preloadScoreIndex].getY()) * RobotContainer.MaxSpeed)
              .withRotationalRate(theLegs.PIDDriveToPointDEG(PoseConstants.BLUE_REEF_POSES[preloadScoreIndex].getRotation().getDegrees()))
          ),
          new ScoreCoral(theLegs, theElephant, theSnout)
      ));
    } else if (theLegs.isAllianceRed()) { // Red Alliance
      theLegs.pathFindToReefRedGH().andThen( // Specific side of the reef H is right G is left  // 0 is a //1 is b
      Commands.parallel(
        theLegs.applyRequest(() -> // Individual pose
            RobotContainer.drive.withVelocityX(theLegs.PIDDriveToPointX(PoseConstants.RED_REEF_POSES[preloadScoreIndex].getX()) * RobotContainer.MaxSpeed)
              .withVelocityY(theLegs.PIDDriveToPointY(PoseConstants.RED_REEF_POSES[preloadScoreIndex].getY()) * RobotContainer.MaxSpeed)
              .withRotationalRate(theLegs.PIDDriveToPointDEG(PoseConstants.RED_REEF_POSES[preloadScoreIndex].getRotation().getDegrees()))
          ),
          new ScoreCoral(theLegs, theElephant, theSnout)
      ));
    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {}

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
}
